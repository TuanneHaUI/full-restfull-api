import "./chunk-AC2VUBZ6.js";

// node_modules/spring-filter-query-builder/dist/esm/item.js
function valuesToValue(values) {
  if (values.length !== 0) {
    return values.map(function(value) {
      return typeof value === "number" ? value : "'" + value + "'";
    }).join(", ");
  }
  return "";
}

// node_modules/spring-filter-query-builder/dist/esm/comparators.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Comparator = (
  /** @class */
  function() {
    function Comparator2(selector, comparatorKeyWord, value) {
      this.selector = selector;
      this.comparatorKeyWord = comparatorKeyWord;
      this.value = value;
    }
    Comparator2.prototype.toString = function() {
      if (this.value) {
        if (typeof this.value === "number") {
          return this.selector + " " + this.comparatorKeyWord + " " + this.value;
        } else {
          return this.selector + " " + this.comparatorKeyWord + " '" + this.value + "'";
        }
      }
      return this.selector + " " + this.comparatorKeyWord;
    };
    return Comparator2;
  }()
);
var Like = (
  /** @class */
  function(_super) {
    __extends(Like2, _super);
    function Like2(selector, value, caseInsensitive) {
      if (caseInsensitive === void 0) {
        caseInsensitive = false;
      }
      return _super.call(this, selector, caseInsensitive ? "~~" : "~", value) || this;
    }
    return Like2;
  }(Comparator)
);
var Equal = (
  /** @class */
  function(_super) {
    __extends(Equal2, _super);
    function Equal2(selector, value) {
      return _super.call(this, selector, ":", value) || this;
    }
    return Equal2;
  }(Comparator)
);
var NotEqual = (
  /** @class */
  function(_super) {
    __extends(NotEqual2, _super);
    function NotEqual2(selector, value) {
      return _super.call(this, selector, "!", value) || this;
    }
    return NotEqual2;
  }(Comparator)
);
var Gt = (
  /** @class */
  function(_super) {
    __extends(Gt2, _super);
    function Gt2(selector, value) {
      return _super.call(this, selector, ">", value) || this;
    }
    return Gt2;
  }(Comparator)
);
var Ge = (
  /** @class */
  function(_super) {
    __extends(Ge2, _super);
    function Ge2(selector, value) {
      return _super.call(this, selector, ">:", value) || this;
    }
    return Ge2;
  }(Comparator)
);
var Lt = (
  /** @class */
  function(_super) {
    __extends(Lt2, _super);
    function Lt2(selector, value) {
      return _super.call(this, selector, "<", value) || this;
    }
    return Lt2;
  }(Comparator)
);
var Le = (
  /** @class */
  function(_super) {
    __extends(Le2, _super);
    function Le2(selector, value) {
      return _super.call(this, selector, "<:", value) || this;
    }
    return Le2;
  }(Comparator)
);
var IsNull = (
  /** @class */
  function(_super) {
    __extends(IsNull2, _super);
    function IsNull2(selector) {
      return _super.call(this, selector, "is null") || this;
    }
    return IsNull2;
  }(Comparator)
);
var IsNotNull = (
  /** @class */
  function(_super) {
    __extends(IsNotNull2, _super);
    function IsNotNull2(selector) {
      return _super.call(this, selector, "is not null") || this;
    }
    return IsNotNull2;
  }(Comparator)
);
var IsEmpty = (
  /** @class */
  function(_super) {
    __extends(IsEmpty2, _super);
    function IsEmpty2(selector) {
      return _super.call(this, selector, "is empty") || this;
    }
    return IsEmpty2;
  }(Comparator)
);
var IsNotEmpty = (
  /** @class */
  function(_super) {
    __extends(IsNotEmpty2, _super);
    function IsNotEmpty2(selector) {
      return _super.call(this, selector, "is not empty") || this;
    }
    return IsNotEmpty2;
  }(Comparator)
);
var In = (
  /** @class */
  function(_super) {
    __extends(In2, _super);
    function In2(selector, values) {
      return _super.call(this, selector, "in", "[" + valuesToValue(values) + "]") || this;
    }
    In2.prototype.toString = function() {
      return this.selector + " " + this.comparatorKeyWord + " " + this.value;
    };
    return In2;
  }(Comparator)
);
var NotIn = (
  /** @class */
  function(_super) {
    __extends(NotIn2, _super);
    function NotIn2(selector, values) {
      return _super.call(this, selector, "not in", "[" + valuesToValue(values) + "]") || this;
    }
    NotIn2.prototype.toString = function() {
      return this.selector + " " + this.comparatorKeyWord + " " + this.value;
    };
    return NotIn2;
  }(Comparator)
);

// node_modules/spring-filter-query-builder/dist/esm/functions.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Function = (
  /** @class */
  function() {
    function Function2(functionKeyWord, selector) {
      this.functionKeyWord = functionKeyWord;
      this.selector = selector;
    }
    Function2.prototype.toString = function() {
      if (this.selector) {
        return this.functionKeyWord + "(" + this.selector + ")";
      } else {
        return this.functionKeyWord + "()";
      }
    };
    return Function2;
  }()
);
var CustomFunction = (
  /** @class */
  function(_super) {
    __extends2(CustomFunction2, _super);
    function CustomFunction2(functionName) {
      var values = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
      }
      return _super.call(this, functionName, values.join(", ")) || this;
    }
    return CustomFunction2;
  }(Function)
);
var Absolute = (
  /** @class */
  function(_super) {
    __extends2(Absolute2, _super);
    function Absolute2(selector) {
      return _super.call(this, "absolute", selector) || this;
    }
    return Absolute2;
  }(Function)
);
var Average = (
  /** @class */
  function(_super) {
    __extends2(Average2, _super);
    function Average2(selector) {
      return _super.call(this, "average", selector) || this;
    }
    return Average2;
  }(Function)
);
var Ceiling = (
  /** @class */
  function(_super) {
    __extends2(Ceiling2, _super);
    function Ceiling2(selector) {
      return _super.call(this, "ceiling", selector) || this;
    }
    return Ceiling2;
  }(Function)
);
var Concat = (
  /** @class */
  function(_super) {
    __extends2(Concat2, _super);
    function Concat2() {
      var values = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
      }
      return _super.call(this, "concat", values.join(", ")) || this;
    }
    return Concat2;
  }(Function)
);
var Count = (
  /** @class */
  function(_super) {
    __extends2(Count2, _super);
    function Count2(selector) {
      return _super.call(this, "count", selector) || this;
    }
    return Count2;
  }(Function)
);
var CountDistinct = (
  /** @class */
  function(_super) {
    __extends2(CountDistinct2, _super);
    function CountDistinct2(selector) {
      return _super.call(this, "countDistinct", selector) || this;
    }
    return CountDistinct2;
  }(Function)
);
var CurrentDate = (
  /** @class */
  function(_super) {
    __extends2(CurrentDate2, _super);
    function CurrentDate2() {
      return _super.call(this, "currentDate") || this;
    }
    return CurrentDate2;
  }(Function)
);
var CurrentTime = (
  /** @class */
  function(_super) {
    __extends2(CurrentTime2, _super);
    function CurrentTime2() {
      return _super.call(this, "currentTime") || this;
    }
    return CurrentTime2;
  }(Function)
);
var CurrentTimestamp = (
  /** @class */
  function(_super) {
    __extends2(CurrentTimestamp2, _super);
    function CurrentTimestamp2() {
      return _super.call(this, "currentTimestamp") || this;
    }
    return CurrentTimestamp2;
  }(Function)
);
var Min = (
  /** @class */
  function(_super) {
    __extends2(Min2, _super);
    function Min2(selector) {
      return _super.call(this, "min", selector) || this;
    }
    return Min2;
  }(Function)
);
var Max = (
  /** @class */
  function(_super) {
    __extends2(Max2, _super);
    function Max2(selector) {
      return _super.call(this, "max", selector) || this;
    }
    return Max2;
  }(Function)
);
var Sum = (
  /** @class */
  function(_super) {
    __extends2(Sum2, _super);
    function Sum2() {
      var selector = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        selector[_i] = arguments[_i];
      }
      return _super.call(this, "sum", selector.join(", ")) || this;
    }
    return Sum2;
  }(Function)
);
var Size = (
  /** @class */
  function(_super) {
    __extends2(Size2, _super);
    function Size2(selector) {
      return _super.call(this, "size", selector) || this;
    }
    return Size2;
  }(Function)
);
var Length = (
  /** @class */
  function(_super) {
    __extends2(Length2, _super);
    function Length2(selector) {
      return _super.call(this, "length", selector) || this;
    }
    return Length2;
  }(Function)
);
var Trim = (
  /** @class */
  function(_super) {
    __extends2(Trim2, _super);
    function Trim2(selector) {
      return _super.call(this, "trim", selector) || this;
    }
    return Trim2;
  }(Function)
);
var Upper = (
  /** @class */
  function(_super) {
    __extends2(Upper2, _super);
    function Upper2(selector) {
      return _super.call(this, "upper", selector) || this;
    }
    return Upper2;
  }(Function)
);
var Lower = (
  /** @class */
  function(_super) {
    __extends2(Lower2, _super);
    function Lower2(selector) {
      return _super.call(this, "lower", selector) || this;
    }
    return Lower2;
  }(Function)
);

// node_modules/spring-filter-query-builder/dist/esm/operators.js
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Operator = (
  /** @class */
  function() {
    function Operator2(operatorKeyWord, items) {
      this.operatorKeyWord = operatorKeyWord;
      this.items = items;
    }
    Operator2.prototype.toString = function() {
      return "(" + this.items.map(function(item) {
        return item.toString();
      }).join(" " + this.operatorKeyWord + " ") + ")";
    };
    return Operator2;
  }()
);
var And = (
  /** @class */
  function(_super) {
    __extends3(And2, _super);
    function And2(items) {
      return _super.call(this, "and", items) || this;
    }
    return And2;
  }(Operator)
);
var Or = (
  /** @class */
  function(_super) {
    __extends3(Or2, _super);
    function Or2(items) {
      return _super.call(this, "or", items) || this;
    }
    return Or2;
  }(Operator)
);
var Not = (
  /** @class */
  function(_super) {
    __extends3(Not2, _super);
    function Not2(item) {
      return _super.call(this, "not", [item]) || this;
    }
    Not2.prototype.toString = function() {
      if (this.items[0] instanceof Operator) {
        return "" + this.operatorKeyWord + this.items[0].toString();
      }
      return this.operatorKeyWord + "(" + this.items[0].toString() + ")";
    };
    return Not2;
  }(Operator)
);
var Exists = (
  /** @class */
  function(_super) {
    __extends3(Exists2, _super);
    function Exists2(item) {
      return _super.call(this, "exists", [item]) || this;
    }
    return Exists2;
  }(Operator)
);

// node_modules/spring-filter-query-builder/dist/esm/index.js
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function sfAnd(items) {
  return new And(items);
}
function sfOr(items) {
  return new Or(items);
}
function sfNot(item) {
  return new Not(item);
}
function sfExists(item) {
  return new Exists(item);
}
function sfLike(selector, value, caseInsensitive) {
  return new Like(selector, value, caseInsensitive);
}
function sfEqual(selector, value) {
  return new Equal(selector, value);
}
function sfNotEqual(selector, value) {
  return new NotEqual(selector, value);
}
function sfGt(selector, value) {
  return new Gt(selector, value);
}
function sfGe(selector, value) {
  return new Ge(selector, value);
}
function sfLt(selector, value) {
  return new Lt(selector, value);
}
function sfLe(selector, value) {
  return new Le(selector, value);
}
function sfIsNull(selector) {
  return new IsNull(selector);
}
function sfIsNotNull(selector) {
  return new IsNotNull(selector);
}
function sfIsEmpty(selector) {
  return new IsEmpty(selector);
}
function sfIsNotEmpty(selector) {
  return new IsNotEmpty(selector);
}
function sfIn(selector, value) {
  return new In(selector, value);
}
function sfNotIn(selector, value) {
  return new NotIn(selector, value);
}
function sfCustomFunction(functionName) {
  var values = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    values[_i - 1] = arguments[_i];
  }
  return new (CustomFunction.bind.apply(CustomFunction, __spreadArray([void 0, functionName], values, false)))();
}
function sfAbs(selector) {
  return new Absolute(selector);
}
function sfAvg(selector) {
  return new Average(selector);
}
function sfCeiling(selector) {
  return new Ceiling(selector);
}
function sfConcat() {
  var selectors = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    selectors[_i] = arguments[_i];
  }
  return new (Concat.bind.apply(Concat, __spreadArray([void 0], selectors, false)))();
}
function sfCount(selector) {
  return new Count(selector);
}
function sfCountDistinct(selector) {
  return new CountDistinct(selector);
}
function sfCurrentDate() {
  return new CurrentDate();
}
function sfCurrentTime() {
  return new CurrentTime();
}
function sfCurrentTimestamp() {
  return new CurrentTimestamp();
}
function sfMin(selector) {
  return new Min(selector);
}
function sfMax(selector) {
  return new Max(selector);
}
function sfSum() {
  var selector = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    selector[_i] = arguments[_i];
  }
  return new (Sum.bind.apply(Sum, __spreadArray([void 0], selector, false)))();
}
function sfSize(selector) {
  return new Size(selector);
}
function sfLength(selector) {
  return new Length(selector);
}
function sfTrim(selector) {
  return new Trim(selector);
}
function sfUpper(selector) {
  return new Upper(selector);
}
function sfLower(selector) {
  return new Lower(selector);
}
export {
  Comparator,
  Function,
  Operator,
  sfAbs,
  sfAnd,
  sfAvg,
  sfCeiling,
  sfConcat,
  sfCount,
  sfCountDistinct,
  sfCurrentDate,
  sfCurrentTime,
  sfCurrentTimestamp,
  sfCustomFunction,
  sfEqual,
  sfExists,
  sfGe,
  sfGt,
  sfIn,
  sfIsEmpty,
  sfIsNotEmpty,
  sfIsNotNull,
  sfIsNull,
  sfLe,
  sfLength,
  sfLike,
  sfLower,
  sfLt,
  sfMax,
  sfMin,
  sfNot,
  sfNotEqual,
  sfNotIn,
  sfOr,
  sfSize,
  sfSum,
  sfTrim,
  sfUpper
};
//# sourceMappingURL=spring-filter-query-builder.js.map
