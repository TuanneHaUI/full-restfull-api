"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sfLower = exports.sfUpper = exports.sfTrim = exports.sfLength = exports.sfSize = exports.sfSum = exports.sfMax = exports.sfMin = exports.sfCurrentTimestamp = exports.sfCurrentTime = exports.sfCurrentDate = exports.sfCountDistinct = exports.sfCount = exports.sfConcat = exports.sfCeiling = exports.sfAvg = exports.sfAbs = exports.sfCustomFunction = exports.sfNotIn = exports.sfIn = exports.sfIsNotEmpty = exports.sfIsEmpty = exports.sfIsNotNull = exports.sfIsNull = exports.sfLe = exports.sfLt = exports.sfGe = exports.sfGt = exports.sfNotEqual = exports.sfEqual = exports.sfLike = exports.sfExists = exports.sfNot = exports.sfOr = exports.sfAnd = exports.Operator = exports.Function = exports.Comparator = void 0;
var comparators_1 = require("./comparators");
var functions_1 = require("./functions");
var operators_1 = require("./operators");
/********* Abstract Classes *********/
var comparators_2 = require("./comparators");
Object.defineProperty(exports, "Comparator", { enumerable: true, get: function () { return comparators_2.Comparator; } });
var functions_2 = require("./functions");
Object.defineProperty(exports, "Function", { enumerable: true, get: function () { return functions_2.Function; } });
var operators_2 = require("./operators");
Object.defineProperty(exports, "Operator", { enumerable: true, get: function () { return operators_2.Operator; } });
/********* Operators *********/
function sfAnd(items) {
    return new operators_1.And(items);
}
exports.sfAnd = sfAnd;
function sfOr(items) {
    return new operators_1.Or(items);
}
exports.sfOr = sfOr;
function sfNot(item) {
    return new operators_1.Not(item);
}
exports.sfNot = sfNot;
/********* Comparators *********/
function sfExists(item) {
    return new operators_1.Exists(item);
}
exports.sfExists = sfExists;
function sfLike(selector, value, caseInsensitive) {
    return new comparators_1.Like(selector, value, caseInsensitive);
}
exports.sfLike = sfLike;
function sfEqual(selector, value) {
    return new comparators_1.Equal(selector, value);
}
exports.sfEqual = sfEqual;
function sfNotEqual(selector, value) {
    return new comparators_1.NotEqual(selector, value);
}
exports.sfNotEqual = sfNotEqual;
function sfGt(selector, value) {
    return new comparators_1.Gt(selector, value);
}
exports.sfGt = sfGt;
function sfGe(selector, value) {
    return new comparators_1.Ge(selector, value);
}
exports.sfGe = sfGe;
function sfLt(selector, value) {
    return new comparators_1.Lt(selector, value);
}
exports.sfLt = sfLt;
function sfLe(selector, value) {
    return new comparators_1.Le(selector, value);
}
exports.sfLe = sfLe;
function sfIsNull(selector) {
    return new comparators_1.IsNull(selector);
}
exports.sfIsNull = sfIsNull;
function sfIsNotNull(selector) {
    return new comparators_1.IsNotNull(selector);
}
exports.sfIsNotNull = sfIsNotNull;
function sfIsEmpty(selector) {
    return new comparators_1.IsEmpty(selector);
}
exports.sfIsEmpty = sfIsEmpty;
function sfIsNotEmpty(selector) {
    return new comparators_1.IsNotEmpty(selector);
}
exports.sfIsNotEmpty = sfIsNotEmpty;
function sfIn(selector, value) {
    return new comparators_1.In(selector, value);
}
exports.sfIn = sfIn;
function sfNotIn(selector, value) {
    return new comparators_1.NotIn(selector, value);
}
exports.sfNotIn = sfNotIn;
/********* Functions *********/
function sfCustomFunction(functionName) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return new (functions_1.CustomFunction.bind.apply(functions_1.CustomFunction, __spreadArray([void 0, functionName], values, false)))();
}
exports.sfCustomFunction = sfCustomFunction;
function sfAbs(selector) {
    return new functions_1.Absolute(selector);
}
exports.sfAbs = sfAbs;
function sfAvg(selector) {
    return new functions_1.Average(selector);
}
exports.sfAvg = sfAvg;
function sfCeiling(selector) {
    return new functions_1.Ceiling(selector);
}
exports.sfCeiling = sfCeiling;
function sfConcat() {
    var selectors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        selectors[_i] = arguments[_i];
    }
    return new (functions_1.Concat.bind.apply(functions_1.Concat, __spreadArray([void 0], selectors, false)))();
}
exports.sfConcat = sfConcat;
function sfCount(selector) {
    return new functions_1.Count(selector);
}
exports.sfCount = sfCount;
function sfCountDistinct(selector) {
    return new functions_1.CountDistinct(selector);
}
exports.sfCountDistinct = sfCountDistinct;
function sfCurrentDate() {
    return new functions_1.CurrentDate();
}
exports.sfCurrentDate = sfCurrentDate;
function sfCurrentTime() {
    return new functions_1.CurrentTime();
}
exports.sfCurrentTime = sfCurrentTime;
function sfCurrentTimestamp() {
    return new functions_1.CurrentTimestamp();
}
exports.sfCurrentTimestamp = sfCurrentTimestamp;
function sfMin(selector) {
    return new functions_1.Min(selector);
}
exports.sfMin = sfMin;
function sfMax(selector) {
    return new functions_1.Max(selector);
}
exports.sfMax = sfMax;
function sfSum() {
    var selector = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        selector[_i] = arguments[_i];
    }
    return new (functions_1.Sum.bind.apply(functions_1.Sum, __spreadArray([void 0], selector, false)))();
}
exports.sfSum = sfSum;
function sfSize(selector) {
    return new functions_1.Size(selector);
}
exports.sfSize = sfSize;
function sfLength(selector) {
    return new functions_1.Length(selector);
}
exports.sfLength = sfLength;
function sfTrim(selector) {
    return new functions_1.Trim(selector);
}
exports.sfTrim = sfTrim;
function sfUpper(selector) {
    return new functions_1.Upper(selector);
}
exports.sfUpper = sfUpper;
function sfLower(selector) {
    return new functions_1.Lower(selector);
}
exports.sfLower = sfLower;
