import { Function } from './functions';
import { Item } from './item';
export declare abstract class Comparator implements Item {
    protected selector: Function | string;
    protected comparatorKeyWord: string;
    protected value?: string | number | undefined;
    constructor(selector: Function | string, comparatorKeyWord: string, value?: string | number | undefined);
    toString(): string;
}
export declare class Like extends Comparator {
    constructor(selector: Function | string, value: string, caseInsensitive?: boolean);
}
export declare class Equal extends Comparator {
    constructor(selector: Function | string, value: string | number);
}
export declare class NotEqual extends Comparator {
    constructor(selector: Function | string, value: string | number);
}
export declare class Gt extends Comparator {
    constructor(selector: Function | string, value: string | number);
}
export declare class Ge extends Comparator {
    constructor(selector: Function | string, value: string | number);
}
export declare class Lt extends Comparator {
    constructor(selector: Function | string, value: string | number);
}
export declare class Le extends Comparator {
    constructor(selector: Function | string, value: string | number);
}
export declare class IsNull extends Comparator {
    constructor(selector: Function | string);
}
export declare class IsNotNull extends Comparator {
    constructor(selector: Function | string);
}
export declare class IsEmpty extends Comparator {
    constructor(selector: Function | string);
}
export declare class IsNotEmpty extends Comparator {
    constructor(selector: Function | string);
}
export declare class In extends Comparator {
    constructor(selector: Function | string, values: (string | number)[]);
    toString(): string;
}
export declare class NotIn extends Comparator {
    constructor(selector: Function | string, values: (string | number)[]);
    toString(): string;
}
