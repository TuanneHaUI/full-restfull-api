var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { Equal, Ge, Gt, In, IsEmpty, IsNotEmpty, IsNotNull, IsNull, Le, Like, Lt, NotEqual, NotIn } from './comparators';
import { Absolute, Average, Ceiling, Concat, Count, CountDistinct, CurrentDate, CurrentTime, CurrentTimestamp, CustomFunction, Length, Lower, Max, Min, Size, Sum, Trim, Upper, } from './functions';
import { And, Exists, Not, Or } from './operators';
/********* Abstract Classes *********/
export { Comparator } from './comparators';
export { Function } from './functions';
export { Operator } from './operators';
/********* Operators *********/
export function sfAnd(items) {
    return new And(items);
}
export function sfOr(items) {
    return new Or(items);
}
export function sfNot(item) {
    return new Not(item);
}
/********* Comparators *********/
export function sfExists(item) {
    return new Exists(item);
}
export function sfLike(selector, value, caseInsensitive) {
    return new Like(selector, value, caseInsensitive);
}
export function sfEqual(selector, value) {
    return new Equal(selector, value);
}
export function sfNotEqual(selector, value) {
    return new NotEqual(selector, value);
}
export function sfGt(selector, value) {
    return new Gt(selector, value);
}
export function sfGe(selector, value) {
    return new Ge(selector, value);
}
export function sfLt(selector, value) {
    return new Lt(selector, value);
}
export function sfLe(selector, value) {
    return new Le(selector, value);
}
export function sfIsNull(selector) {
    return new IsNull(selector);
}
export function sfIsNotNull(selector) {
    return new IsNotNull(selector);
}
export function sfIsEmpty(selector) {
    return new IsEmpty(selector);
}
export function sfIsNotEmpty(selector) {
    return new IsNotEmpty(selector);
}
export function sfIn(selector, value) {
    return new In(selector, value);
}
export function sfNotIn(selector, value) {
    return new NotIn(selector, value);
}
/********* Functions *********/
export function sfCustomFunction(functionName) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return new (CustomFunction.bind.apply(CustomFunction, __spreadArray([void 0, functionName], values, false)))();
}
export function sfAbs(selector) {
    return new Absolute(selector);
}
export function sfAvg(selector) {
    return new Average(selector);
}
export function sfCeiling(selector) {
    return new Ceiling(selector);
}
export function sfConcat() {
    var selectors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        selectors[_i] = arguments[_i];
    }
    return new (Concat.bind.apply(Concat, __spreadArray([void 0], selectors, false)))();
}
export function sfCount(selector) {
    return new Count(selector);
}
export function sfCountDistinct(selector) {
    return new CountDistinct(selector);
}
export function sfCurrentDate() {
    return new CurrentDate();
}
export function sfCurrentTime() {
    return new CurrentTime();
}
export function sfCurrentTimestamp() {
    return new CurrentTimestamp();
}
export function sfMin(selector) {
    return new Min(selector);
}
export function sfMax(selector) {
    return new Max(selector);
}
export function sfSum() {
    var selector = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        selector[_i] = arguments[_i];
    }
    return new (Sum.bind.apply(Sum, __spreadArray([void 0], selector, false)))();
}
export function sfSize(selector) {
    return new Size(selector);
}
export function sfLength(selector) {
    return new Length(selector);
}
export function sfTrim(selector) {
    return new Trim(selector);
}
export function sfUpper(selector) {
    return new Upper(selector);
}
export function sfLower(selector) {
    return new Lower(selector);
}
