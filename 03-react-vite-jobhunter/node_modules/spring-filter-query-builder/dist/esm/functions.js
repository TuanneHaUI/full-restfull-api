var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Function = /** @class */ (function () {
    function Function(functionKeyWord, selector) {
        this.functionKeyWord = functionKeyWord;
        this.selector = selector;
    }
    Function.prototype.toString = function () {
        if (this.selector) {
            return this.functionKeyWord + "(" + this.selector + ")";
        }
        else {
            return this.functionKeyWord + "()";
        }
    };
    return Function;
}());
export { Function };
var CustomFunction = /** @class */ (function (_super) {
    __extends(CustomFunction, _super);
    function CustomFunction(functionName) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        return _super.call(this, functionName, values.join(', ')) || this;
    }
    return CustomFunction;
}(Function));
export { CustomFunction };
var Absolute = /** @class */ (function (_super) {
    __extends(Absolute, _super);
    function Absolute(selector) {
        return _super.call(this, 'absolute', selector) || this;
    }
    return Absolute;
}(Function));
export { Absolute };
var Average = /** @class */ (function (_super) {
    __extends(Average, _super);
    function Average(selector) {
        return _super.call(this, 'average', selector) || this;
    }
    return Average;
}(Function));
export { Average };
var Ceiling = /** @class */ (function (_super) {
    __extends(Ceiling, _super);
    function Ceiling(selector) {
        return _super.call(this, 'ceiling', selector) || this;
    }
    return Ceiling;
}(Function));
export { Ceiling };
var Concat = /** @class */ (function (_super) {
    __extends(Concat, _super);
    function Concat() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return _super.call(this, 'concat', values.join(', ')) || this;
    }
    return Concat;
}(Function));
export { Concat };
var Count = /** @class */ (function (_super) {
    __extends(Count, _super);
    function Count(selector) {
        return _super.call(this, 'count', selector) || this;
    }
    return Count;
}(Function));
export { Count };
var CountDistinct = /** @class */ (function (_super) {
    __extends(CountDistinct, _super);
    function CountDistinct(selector) {
        return _super.call(this, 'countDistinct', selector) || this;
    }
    return CountDistinct;
}(Function));
export { CountDistinct };
var CurrentDate = /** @class */ (function (_super) {
    __extends(CurrentDate, _super);
    function CurrentDate() {
        return _super.call(this, 'currentDate') || this;
    }
    return CurrentDate;
}(Function));
export { CurrentDate };
var CurrentTime = /** @class */ (function (_super) {
    __extends(CurrentTime, _super);
    function CurrentTime() {
        return _super.call(this, 'currentTime') || this;
    }
    return CurrentTime;
}(Function));
export { CurrentTime };
var CurrentTimestamp = /** @class */ (function (_super) {
    __extends(CurrentTimestamp, _super);
    function CurrentTimestamp() {
        return _super.call(this, 'currentTimestamp') || this;
    }
    return CurrentTimestamp;
}(Function));
export { CurrentTimestamp };
var Min = /** @class */ (function (_super) {
    __extends(Min, _super);
    function Min(selector) {
        return _super.call(this, 'min', selector) || this;
    }
    return Min;
}(Function));
export { Min };
var Max = /** @class */ (function (_super) {
    __extends(Max, _super);
    function Max(selector) {
        return _super.call(this, 'max', selector) || this;
    }
    return Max;
}(Function));
export { Max };
var Sum = /** @class */ (function (_super) {
    __extends(Sum, _super);
    function Sum() {
        var selector = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            selector[_i] = arguments[_i];
        }
        return _super.call(this, 'sum', selector.join(', ')) || this;
    }
    return Sum;
}(Function));
export { Sum };
var Size = /** @class */ (function (_super) {
    __extends(Size, _super);
    function Size(selector) {
        return _super.call(this, 'size', selector) || this;
    }
    return Size;
}(Function));
export { Size };
var Length = /** @class */ (function (_super) {
    __extends(Length, _super);
    function Length(selector) {
        return _super.call(this, 'length', selector) || this;
    }
    return Length;
}(Function));
export { Length };
var Trim = /** @class */ (function (_super) {
    __extends(Trim, _super);
    function Trim(selector) {
        return _super.call(this, 'trim', selector) || this;
    }
    return Trim;
}(Function));
export { Trim };
var Upper = /** @class */ (function (_super) {
    __extends(Upper, _super);
    function Upper(selector) {
        return _super.call(this, 'upper', selector) || this;
    }
    return Upper;
}(Function));
export { Upper };
var Lower = /** @class */ (function (_super) {
    __extends(Lower, _super);
    function Lower(selector) {
        return _super.call(this, 'lower', selector) || this;
    }
    return Lower;
}(Function));
export { Lower };
